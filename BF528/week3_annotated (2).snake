# Again, we specify the base file names which will serve to inform snakemake to the appopriate
# wildcards it will ultimately end up determining. We will discuss more elegant ways to do this
# for project 2 that doesn't involve creating a python list in every snakefile. 

NAMES = ['ADrep1', 'ADrep2', 'P0rep1', 'P0rep2', 'P4rep1', 'P4rep2', 'P7rep1', 'P7rep2']

# Rule all for outputs
rule all:
	input:
		'results/verse_concat_filtered.csv',
		'results/id2gene.txt',

# Running verse for quantification

rule verse:
	input:
		bam = 'results/{name}.Aligned.out.bam',
		gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf',
	output:
		verse_exons = 'results/{name}.exon.txt'
	params:
		prefix = 'results/{name}'
	shell:
		'verse -S -a {input.gtf} -o {params.prefix} {input.bam}'




# concatting out VERSE output into a csv file, concat_df.py was provided via the instructor.
rule concat_verse:
	input:
		mats = expand('results/{name}.exon.txt', name=NAMES)
	output:
		concat = 'results/verse_concat.csv'
	shell:
		'''
		python concat_df.py -i {input.mats} -o {output.concat}
		'''


# filering the results, the filter_cts_mat.py was provided via the instructor.
rule filter_cts:
	input:
		verse = 'results/verse_concat.csv'
	output:
		filtered = 'results/verse_concat_filtered.csv'
	shell:
		'''
		python filter_cts_mat.py -i {input.verse} -o {output.filtered}
		'''


rule txn_mapping:
	input:
		gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf'
	output:
		mapping = 'results/id2gene.txt'
	shell:
		'''
		python parse_gtf.py -i {input.gtf} -o {output.mapping}
		'''

